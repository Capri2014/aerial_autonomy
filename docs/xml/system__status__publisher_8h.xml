<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="system__status__publisher_8h" kind="file">
    <compoundname>system_status_publisher.h</compoundname>
    <includes local="no">ros/ros.h</includes>
    <includes refid="base__robot__system_8h" local="no">aerial_autonomy/robot_systems/base_robot_system.h</includes>
    <includedby refid="common__system__handler_8h" local="no">include/aerial_autonomy/system_handlers/common_system_handler.h</includedby>
    <incdepgraph>
      <node id="1322">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="1323">
        <label>aerial_autonomy/common/type_map.h</label>
        <link refid="type__map_8h"/>
        <childnode refid="1324" relation="include">
        </childnode>
        <childnode refid="1325" relation="include">
        </childnode>
      </node>
      <node id="1320">
        <label>aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h</label>
        <link refid="base__controller__hardware__connector_8h"/>
        <childnode refid="1321" relation="include">
        </childnode>
      </node>
      <node id="1326">
        <label>aerial_autonomy/common/iterable_enum.h</label>
        <link refid="iterable__enum_8h"/>
      </node>
      <node id="1319">
        <label>aerial_autonomy/robot_systems/base_robot_system.h</label>
        <link refid="base__robot__system_8h"/>
        <childnode refid="1320" relation="include">
        </childnode>
        <childnode refid="1323" relation="include">
        </childnode>
        <childnode refid="1326" relation="include">
        </childnode>
        <childnode refid="1322" relation="include">
        </childnode>
        <childnode refid="1327" relation="include">
        </childnode>
      </node>
      <node id="1321">
        <label>aerial_autonomy/controllers/base_controller.h</label>
        <link refid="base__controller_8h"/>
        <childnode refid="1322" relation="include">
        </childnode>
      </node>
      <node id="1318">
        <label>ros/ros.h</label>
      </node>
      <node id="1325">
        <label>unordered_map</label>
      </node>
      <node id="1317">
        <label>include/aerial_autonomy/common/system_status_publisher.h</label>
        <link refid="system_status_publisher.h"/>
        <childnode refid="1318" relation="include">
        </childnode>
        <childnode refid="1319" relation="include">
        </childnode>
      </node>
      <node id="1327">
        <label>memory</label>
      </node>
      <node id="1324">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1331">
        <label>src/system_handler_nodes/uav_system_node.cpp</label>
        <link refid="uav__system__node_8cpp"/>
      </node>
      <node id="1330">
        <label>include/aerial_autonomy/system_handlers/uav_system_handler.h</label>
        <link refid="uav__system__handler_8h"/>
        <childnode refid="1331" relation="include">
        </childnode>
      </node>
      <node id="1329">
        <label>include/aerial_autonomy/system_handlers/common_system_handler.h</label>
        <link refid="common__system__handler_8h"/>
        <childnode refid="1330" relation="include">
        </childnode>
      </node>
      <node id="1328">
        <label>include/aerial_autonomy/common/system_status_publisher.h</label>
        <link refid="system_status_publisher.h"/>
        <childnode refid="1329" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classSystemStatusPublisher" prot="public">SystemStatusPublisher</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ros/ros.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>Robot<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="base__robot__system_8h" kindref="compound">aerial_autonomy/robot_systems/base_robot_system.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="classSystemStatusPublisher" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LogicStateMachineT&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSystemStatusPublisher" kindref="compound">SystemStatusPublisher</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20" refid="classSystemStatusPublisher_1ab9388769d6316a7fc8023c2597b1dd2d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classSystemStatusPublisher_1ab9388769d6316a7fc8023c2597b1dd2d" kindref="member">SystemStatusPublisher</ref>(ros::NodeHandle<sp/>&amp;nh,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classBaseRobotSystem" kindref="compound">BaseRobotSystem</ref><sp/>&amp;robot_system,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogicStateMachineT<sp/>&amp;logic_state_machine)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>nh_(nh),</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system_status_pub_(nh.advertise&lt;std_msgs::String&gt;(</highlight><highlight class="stringliteral">&quot;system_status&quot;</highlight><highlight class="normal">,<sp/>1)),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>robot_system_(robot_system),<sp/>logic_state_machine_(logic_state_machine)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classSystemStatusPublisher_1a66f73a2e489face69d6f9fc16abb15aa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSystemStatusPublisher_1a66f73a2e489face69d6f9fc16abb15aa" kindref="member">publishSystemStatus</ref>()<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>robot_system_status<sp/>=<sp/>robot_system_.<ref refid="classBaseRobotSystem_1a63c0c5e504f352000c6fb6fce9047dec" kindref="member">getSystemStatus</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>current_state_name<sp/>=<sp/><ref refid="uav__state__machine_8h_1a72b959b4319f55f2ef58b9c96fb66a23" kindref="member">pstate</ref>(logic_state_machine_);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>no_transition_event_name<sp/>=</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logic_state_machine_.get_no_transition_event_index().name();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std_msgs::String<sp/>status;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>status.data<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Robot<sp/>System<sp/>Status:\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>robot_system_status<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>status.data<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n\n========================\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>status.data<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Logic<sp/>State<sp/>Machine<sp/>Status:<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>status.data<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Current<sp/>state:\t&quot;</highlight><highlight class="normal"><sp/>+<sp/>current_state_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>status.data<sp/>+=</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Last<sp/>event<sp/>without<sp/>transition:\t&quot;</highlight><highlight class="normal"><sp/>+<sp/>no_transition_event_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>system_status_pub_.publish(status);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>&amp;nh_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>ros::Publisher<sp/>system_status_pub_;<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classBaseRobotSystem" kindref="compound">BaseRobotSystem</ref></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;robot_system_;<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LogicStateMachineT</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;logic_state_machine_;<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/system_status_publisher.h"/>
  </compounddef>
</doxygen>
