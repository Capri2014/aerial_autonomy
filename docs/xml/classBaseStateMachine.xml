<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classBaseStateMachine" kind="class" prot="public">
    <compoundname>BaseStateMachine</compoundname>
    <derivedcompoundref refid="classSampleLogicStateMachine__" prot="public" virt="non-virtual">SampleLogicStateMachine_&lt; RobotSystemT &gt;</derivedcompoundref>
    <includes refid="base__state__machine_8h" local="no">base_state_machine.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>RobotSystemT</declname>
        <defname>RobotSystemT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBaseStateMachine_1ac261a6e2f6829dd213d58e690093c192" prot="protected" static="no" mutable="no">
        <type>std::type_index</type>
        <definition>std::type_index BaseStateMachine&lt; RobotSystemT &gt;::no_transition_event_index_</definition>
        <argsstring></argsstring>
        <name>no_transition_event_index_</name>
        <initializer>= typeid(NULL)</initializer>
        <briefdescription>
<para>type index to store the event that did not trigger any transition </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" line="24" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classBaseStateMachine_1a75dfc85f8804c2579ad9dc8c2239aba1" prot="public" static="no" mutable="no">
        <type><ref refid="classRobotSystemContainer" kindref="compound">RobotSystemContainer</ref>&lt; RobotSystemT &gt;</type>
        <definition>RobotSystemContainer&lt;RobotSystemT&gt; BaseStateMachine&lt; RobotSystemT &gt;::robot_system_container_</definition>
        <argsstring></argsstring>
        <name>robot_system_container_</name>
        <briefdescription>
<para>robot system container used by states to get sensor data and send commands Use the operator function <ref refid="classBaseStateMachine_1a75dfc85f8804c2579ad9dc8c2239aba1" kindref="member">robot_system_container_()</ref> to retrieve robot system in Action, Guard Functors. Other classes cannot access the robot system </para>        </briefdescription>
        <detaileddescription>
<para>Decision Logic: The robot system container ensures that robot system is available to only few friend classes such as action functor, guard functors and is not available to others. This is necessary since we do not expect the logic state machine to contain the robot system. This was the only reasonable way found to share robot system across action and guard functors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" line="40" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBaseStateMachine_1a286ff1d9af1151821ed44842a5e4fb8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::type_index</type>
        <definition>std::type_index BaseStateMachine&lt; RobotSystemT &gt;::get_no_transition_event_index</definition>
        <argsstring>() const </argsstring>
        <name>get_no_transition_event_index</name>
        <briefdescription>
<para>Returns the index of the event that did not trigger any transition. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The no-transition event index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" line="46" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classBaseStateMachine_1a2cb25947ca74c77568736975125aed44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BaseStateMachine&lt; RobotSystemT &gt;::BaseStateMachine</definition>
        <argsstring>(RobotSystemT &amp;robot_system)</argsstring>
        <name>BaseStateMachine</name>
        <param>
          <type>RobotSystemT &amp;</type>
          <declname>robot_system</declname>
        </param>
        <briefdescription>
<para>Constructor with arguments to store robot system. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uav_system</parametername>
</parameternamelist>
<parameterdescription>
<para>robot system that is stored internally and shared with events </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" line="56" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" bodystart="56" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classBaseStateMachine_1ab047241678b8eba01f428ef1af5c055f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FSM</type>
          </param>
          <param>
            <type>class Event</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void BaseStateMachine&lt; RobotSystemT &gt;::no_transition</definition>
        <argsstring>(Event const &amp;e, FSM &amp;, int state_index)</argsstring>
        <name>no_transition</name>
        <param>
          <type>Event const &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>FSM &amp;</type>
        </param>
        <param>
          <type>int</type>
          <declname>state_index</declname>
        </param>
        <briefdescription>
<para>Print event typeid if no action present for the corresponding event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FSM</parametername>
</parameternamelist>
<parameterdescription>
<para>Backend to trigger events etc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event type that triggered no transition </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>event instance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the state where the no transition event is received </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" line="69" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" bodystart="69" bodyend="73"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base state machine. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="592">
        <label>BaseStateMachine&lt; RobotSystemT &gt;</label>
        <link refid="classBaseStateMachine"/>
      </node>
      <node id="593">
        <label>SampleLogicStateMachine_&lt; RobotSystemT &gt;</label>
        <link refid="classSampleLogicStateMachine__"/>
        <childnode refid="592" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" line="18" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/state_machines/base_state_machine.h" bodystart="18" bodyend="74"/>
    <listofallmembers>
      <member refid="classBaseStateMachine_1a2cb25947ca74c77568736975125aed44" prot="public" virt="non-virtual"><scope>BaseStateMachine</scope><name>BaseStateMachine</name></member>
      <member refid="classBaseStateMachine_1a286ff1d9af1151821ed44842a5e4fb8c" prot="public" virt="non-virtual"><scope>BaseStateMachine</scope><name>get_no_transition_event_index</name></member>
      <member refid="classBaseStateMachine_1ab047241678b8eba01f428ef1af5c055f" prot="public" virt="non-virtual"><scope>BaseStateMachine</scope><name>no_transition</name></member>
      <member refid="classBaseStateMachine_1ac261a6e2f6829dd213d58e690093c192" prot="protected" virt="non-virtual"><scope>BaseStateMachine</scope><name>no_transition_event_index_</name></member>
      <member refid="classBaseStateMachine_1a75dfc85f8804c2579ad9dc8c2239aba1" prot="public" virt="non-virtual"><scope>BaseStateMachine</scope><name>robot_system_container_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
