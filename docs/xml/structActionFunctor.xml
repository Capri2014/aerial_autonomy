<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="structActionFunctor" kind="struct" prot="public" abstract="yes">
    <compoundname>ActionFunctor</compoundname>
    <includes refid="base__functors_8h" local="no">base_functors.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>EventT</declname>
        <defname>EventT</defname>
      </param>
      <param>
        <type>class</type>
        <declname>RobotSystemT</declname>
        <defname>RobotSystemT</defname>
      </param>
      <param>
        <type>class</type>
        <declname>LogicStateMachineT</declname>
        <defname>LogicStateMachineT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structActionFunctor_1a97250a2cc027dc3ca7d10a975d11a5c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ActionFunctor&lt; EventT, RobotSystemT, LogicStateMachineT &gt;::run</definition>
        <argsstring>(EventT const &amp;event, RobotSystemT &amp;robot_system, LogicStateMachineT &amp;logic_state_machine)=0</argsstring>
        <name>run</name>
        <reimplementedby refid="structPositionControlTransitionActionFunctor___1a4970bb461809ffa30984e16902bb8aaa">run</reimplementedby>
        <param>
          <type>EventT const &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>RobotSystemT &amp;</type>
          <declname>robot_system</declname>
        </param>
        <param>
          <type>LogicStateMachineT &amp;</type>
          <declname>logic_state_machine</declname>
        </param>
        <briefdescription>
<para>Override this run function for different sub classes. This function performs the logic checking for each state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>robot_system</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides sensor data and allows for controlling hardware </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logic_state_machine</parametername>
</parameternamelist>
<parameterdescription>
<para>Backend of logic State Machine. can send events using this. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event triggering the action </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/actions_guards/base_functors.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structActionFunctor_1adbf24aea135ecf5a0d470b290a5cab02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FSM</type>
          </param>
          <param>
            <type>class SourceState</type>
          </param>
          <param>
            <type>class TargetState</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ActionFunctor&lt; EventT, RobotSystemT, LogicStateMachineT &gt;::operator()</definition>
        <argsstring>(EventT const &amp;event, FSM &amp;logic_state_machine, SourceState &amp;, TargetState &amp;)</argsstring>
        <name>operator()</name>
        <param>
          <type>EventT const &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>FSM &amp;</type>
          <declname>logic_state_machine</declname>
        </param>
        <param>
          <type>SourceState &amp;</type>
        </param>
        <param>
          <type>TargetState &amp;</type>
        </param>
        <briefdescription>
<para>operator () Internally calls run function </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>logic_state_machine</parametername>
</parameternamelist>
<parameterdescription>
<para>Backend of logic State Machine. can send events using this. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event triggering the action </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/actions_guards/base_functors.h" line="38" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/actions_guards/base_functors.h" bodystart="38" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="structActionFunctor_1aaaa4c1ce7204b370be55f2ef4a618258" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ActionFunctor&lt; EventT, RobotSystemT, LogicStateMachineT &gt;::~ActionFunctor</definition>
        <argsstring>()</argsstring>
        <name>~ActionFunctor</name>
        <briefdescription>
<para>Virtual destructor to obtain polymorphism. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/actions_guards/base_functors.h" line="58" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/actions_guards/base_functors.h" bodystart="58" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Action Functor for a given event, robot system, state machine. </para>    </briefdescription>
    <detaileddescription>
<para>This class provides run function for state transitions Derived states have to implement the specific run function behavior using this base class.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EventT</parametername>
</parameternamelist>
<parameterdescription>
<para>Event triggering this action </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RobotSystemT</parametername>
</parameternamelist>
<parameterdescription>
<para>The robot system used in the action </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LogicStateMachineT</parametername>
</parameternamelist>
<parameterdescription>
<para>The logic state machine used to trigger events </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/actions_guards/base_functors.h" line="18" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/actions_guards/base_functors.h" bodystart="18" bodyend="59"/>
    <listofallmembers>
      <member refid="structActionFunctor_1adbf24aea135ecf5a0d470b290a5cab02" prot="public" virt="non-virtual"><scope>ActionFunctor</scope><name>operator()</name></member>
      <member refid="structActionFunctor_1a97250a2cc027dc3ca7d10a975d11a5c7" prot="public" virt="pure-virtual"><scope>ActionFunctor</scope><name>run</name></member>
      <member refid="structActionFunctor_1aaaa4c1ce7204b370be55f2ef4a618258" prot="public" virt="virtual"><scope>ActionFunctor</scope><name>~ActionFunctor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
