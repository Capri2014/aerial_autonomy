<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="structVelocityYaw" kind="struct" prot="public">
    <compoundname>VelocityYaw</compoundname>
    <basecompoundref refid="structVelocity" prot="public" virt="non-virtual">Velocity</basecompoundref>
    <includes refid="velocity__yaw_8h" local="no">velocity_yaw.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structVelocityYaw_1a5bef45a2807a9814495080d2e5603ce4" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double VelocityYaw::yaw</definition>
        <argsstring></argsstring>
        <name>yaw</name>
        <briefdescription>
<para>Orientation around global z axis. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" line="32" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structVelocityYaw_1a1aa3de4b3e3d7510c233ebd54b2fe79d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VelocityYaw::VelocityYaw</definition>
        <argsstring>()</argsstring>
        <name>VelocityYaw</name>
        <briefdescription>
<para>Implicit constructor Instantiates velocity and yaw to zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" line="14" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="structVelocityYaw_1a21a3493e39f5256972abe5f97315c80b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VelocityYaw::VelocityYaw</definition>
        <argsstring>(Velocity v, double yaw)</argsstring>
        <name>VelocityYaw</name>
        <param>
          <type><ref refid="structVelocity" kindref="compound">Velocity</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yaw</declname>
        </param>
        <briefdescription>
<para>Explicit constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structVelocity" kindref="compound">Velocity</ref> vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yaw</parametername>
</parameternamelist>
<parameterdescription>
<para>Orientation around body axis (rad) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" line="21" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="structVelocityYaw_1ab4ebb3f3782c9541dafb73c4e3e82196" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VelocityYaw::VelocityYaw</definition>
        <argsstring>(double x, double y, double z, double yaw)</argsstring>
        <name>VelocityYaw</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yaw</declname>
        </param>
        <briefdescription>
<para>Explicit constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x component (m/s) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y component (m/s) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>z component (m/s) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yaw</parametername>
</parameternamelist>
<parameterdescription>
<para>Orientation around global z axis (rad) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" line="30" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" bodystart="30" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structVelocityYaw_1ad546c6bf2a5483fdb21387e0df040acb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool VelocityYaw::operator==</definition>
        <argsstring>(const VelocityYaw &amp;v) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structVelocityYaw" kindref="compound">VelocityYaw</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Compare two velocityyaws. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structVelocityYaw" kindref="compound">VelocityYaw</ref> to compare against</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if same </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" line="41" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structVelocityYaw_1a239edcca362f6a0fababa7fb1767e7b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool VelocityYaw::operator!=</definition>
        <argsstring>(const VelocityYaw &amp;v) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structVelocityYaw" kindref="compound">VelocityYaw</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Compare two velocityyaws. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structVelocityYaw" kindref="compound">VelocityYaw</ref> to compare against</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if not same </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" line="51" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" bodystart="51" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Store velocity and yaw Used as goal for builtin velocity and yaw controller for UAV system. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="399">
        <label>Velocity</label>
        <link refid="structVelocity"/>
      </node>
      <node id="398">
        <label>VelocityYaw</label>
        <link refid="structVelocityYaw"/>
        <childnode refid="399" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="401">
        <label>Velocity</label>
        <link refid="structVelocity"/>
      </node>
      <node id="400">
        <label>VelocityYaw</label>
        <link refid="structVelocityYaw"/>
        <childnode refid="401" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" line="9" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/types/velocity_yaw.h" bodystart="9" bodyend="52"/>
    <listofallmembers>
      <member refid="structVelocityYaw_1a239edcca362f6a0fababa7fb1767e7b6" prot="public" virt="non-virtual"><scope>VelocityYaw</scope><name>operator!=</name></member>
      <member refid="structVelocity_1a8aaa79fd50b42d41e06033be8baf4c80" prot="public" virt="non-virtual" ambiguityscope="Velocity::"><scope>VelocityYaw</scope><name>operator!=</name></member>
      <member refid="structVelocityYaw_1ad546c6bf2a5483fdb21387e0df040acb" prot="public" virt="non-virtual"><scope>VelocityYaw</scope><name>operator==</name></member>
      <member refid="structVelocity_1a4d148dc8c7581af4a1a16116ec3d403a" prot="public" virt="non-virtual" ambiguityscope="Velocity::"><scope>VelocityYaw</scope><name>operator==</name></member>
      <member refid="structVelocity_1a852088c8d4dbb7e1beb0d793a57e9d11" prot="public" virt="non-virtual"><scope>VelocityYaw</scope><name>Velocity</name></member>
      <member refid="structVelocity_1adb5f7fd7a3e1811b44c9b4020c31987c" prot="public" virt="non-virtual"><scope>VelocityYaw</scope><name>Velocity</name></member>
      <member refid="structVelocityYaw_1a1aa3de4b3e3d7510c233ebd54b2fe79d" prot="public" virt="non-virtual"><scope>VelocityYaw</scope><name>VelocityYaw</name></member>
      <member refid="structVelocityYaw_1a21a3493e39f5256972abe5f97315c80b" prot="public" virt="non-virtual"><scope>VelocityYaw</scope><name>VelocityYaw</name></member>
      <member refid="structVelocityYaw_1ab4ebb3f3782c9541dafb73c4e3e82196" prot="public" virt="non-virtual"><scope>VelocityYaw</scope><name>VelocityYaw</name></member>
      <member refid="structVelocity_1a99a9f9580c8a025a2c7a18890993b56a" prot="public" virt="non-virtual"><scope>VelocityYaw</scope><name>x</name></member>
      <member refid="structVelocity_1ae1282d20e14cc4be4aac24ab4e1e3e5c" prot="public" virt="non-virtual"><scope>VelocityYaw</scope><name>y</name></member>
      <member refid="structVelocityYaw_1a5bef45a2807a9814495080d2e5603ce4" prot="public" virt="non-virtual"><scope>VelocityYaw</scope><name>yaw</name></member>
      <member refid="structVelocity_1aaebcd198674f7adcb61f9bb981dab465" prot="public" virt="non-virtual"><scope>VelocityYaw</scope><name>z</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
