<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classArmSystem" kind="class" prot="public">
    <compoundname>ArmSystem</compoundname>
    <basecompoundref refid="classBaseRobotSystem" prot="public" virt="non-virtual">BaseRobotSystem</basecompoundref>
    <includes refid="arm__system_8h" local="no">arm_system.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classArmSystem_1a436f51d221818fa066aff4f8f33d3f44" prot="private" static="no" mutable="no">
        <type>GenericArm</type>
        <definition>GenericArm ArmSystem::arm_hardware_</definition>
        <argsstring></argsstring>
        <name>arm_hardware_</name>
        <briefdescription>
<para>Hardware. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" line="20" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classArmSystem_1a582fe1e1dc69a555a61418a39c6428ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ArmSystem::ArmSystem</definition>
        <argsstring>(ros::NodeHandle &amp;nh)</argsstring>
        <name>ArmSystem</name>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <declname>nh</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000015"><xreftitle>Todo</xreftitle><xrefdescription><para>Add controllers, controller connectors, config if needed </para></xrefdescription></xrefsect><ref refid="classArmSystem" kindref="compound">ArmSystem</ref> requires an arm hardware. It instantiates the connectors, controllers</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arm_hardware</parametername>
</parameternamelist>
<parameterdescription>
<para>input hardware to send commands back </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" line="32" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classArmSystem_1aad47744d8d45da74ca2544ccc527516a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Matrix4d</type>
        <definition>Eigen::Matrix4d ArmSystem::getEndEffectorPose</definition>
        <argsstring>()</argsstring>
        <name>getEndEffectorPose</name>
        <briefdescription>
<para>Public API call to get end effector transform. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" line="37" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classArmSystem_1a408f99ee51cbad8921c7451b75b162fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ArmSystem::grip</definition>
        <argsstring>(bool grip_action)</argsstring>
        <name>grip</name>
        <param>
          <type>bool</type>
          <declname>grip_action</declname>
        </param>
        <briefdescription>
<para>Public API call to grip/ungrip an object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grip_action</parametername>
</parameternamelist>
<parameterdescription>
<para>true to grip an object and false to ungrip </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" line="46" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" bodystart="46" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classArmSystem_1a56b52cb9b2b9a250dad2f9608ffd598f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ArmSystem::power</definition>
        <argsstring>(bool state)</argsstring>
        <name>power</name>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Power the arm on/off. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>True to switch on, and False to switch off. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" line="63" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" bodystart="63" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classArmSystem_1a838859b74e7b78b173394db035a980cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ArmSystem::foldArm</definition>
        <argsstring>()</argsstring>
        <name>foldArm</name>
        <briefdescription>
<para>Set the arm joints to a known folded configuration. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" line="74" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classArmSystem_1a0fe569966065f6e16c49345ee1883552" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ArmSystem::rightArm</definition>
        <argsstring>()</argsstring>
        <name>rightArm</name>
        <briefdescription>
<para>Set the arm joints to a known L shaped configuration. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" line="79" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classArmSystem_1ac050d7d49cc7416d5992f102ff2bdc3d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string ArmSystem::getSystemStatus</definition>
        <argsstring>() const </argsstring>
        <name>getSystemStatus</name>
        <reimplements refid="classBaseRobotSystem_1a63c0c5e504f352000c6fb6fce9047dec">getSystemStatus</reimplements>
        <briefdescription>
<para>Provide the current state of arm system. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000016"><xreftitle>Todo</xreftitle><xrefdescription><para>Add status about arm powered on/off, and any error messages can also add arm end effector pose if useful</para></xrefdescription></xrefsect></para><para><simplesect kind="return"><para>string representation of the arm system state </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" line="88" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classArmSystem_1ae7b62dcab17fbb41137f071eaeb67735" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmSystem::getCommandStatus</definition>
        <argsstring>() const </argsstring>
        <name>getCommandStatus</name>
        <briefdescription>
<para>Verify the status of grip/power on/off commands. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the command is complete </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" line="95" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classArmSystem_1af60b9bbcfd0ff2e34f766be48fe3715e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmSystem::enabled</definition>
        <argsstring>()</argsstring>
        <name>enabled</name>
        <briefdescription>
<para>If arm is enabled return. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if arm enabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" line="102" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" bodystart="102" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Owns, initializes, and facilitates communication between different hardware/software components. Provides builtin set/get end effector pose, joint angles for a generic arm. </para>    </briefdescription>
    <detaileddescription>
<para><xrefsect id="todo_1_todo000014"><xreftitle>Todo</xreftitle><xrefdescription><para>Add controllers and controller connectors for visual servoing </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <inheritancegraph>
      <node id="353">
        <label>BaseRobotSystem</label>
        <link refid="classBaseRobotSystem"/>
      </node>
      <node id="352">
        <label>ArmSystem</label>
        <link refid="classArmSystem"/>
        <childnode refid="353" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="356">
        <label>TypeMap&lt; AbstractControllerHardwareConnector &gt;</label>
        <link refid="classTypeMap"/>
      </node>
      <node id="355">
        <label>BaseRobotSystem</label>
        <link refid="classBaseRobotSystem"/>
        <childnode refid="356" relation="usage">
          <edgelabel>controller_hardware_connector_container_</edgelabel>
        </childnode>
      </node>
      <node id="354">
        <label>ArmSystem</label>
        <link refid="classArmSystem"/>
        <childnode refid="355" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" line="14" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/robot_systems/arm_system.h" bodystart="14" bodyend="105"/>
    <listofallmembers>
      <member refid="classBaseRobotSystem_1a3e7031f99e64e7c371ee31fbd69f6bf9" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>abortController</name></member>
      <member refid="classArmSystem_1a436f51d221818fa066aff4f8f33d3f44" prot="private" virt="non-virtual"><scope>ArmSystem</scope><name>arm_hardware_</name></member>
      <member refid="classArmSystem_1a582fe1e1dc69a555a61418a39c6428ed" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>ArmSystem</name></member>
      <member refid="classBaseRobotSystem_1a257fff284254de019428ae7073333b47" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>BaseRobotSystem</name></member>
      <member refid="classBaseRobotSystem_1a9539998f793faa61ed89e4c7ecc711ad" prot="protected" virt="non-virtual"><scope>ArmSystem</scope><name>controller_hardware_connector_container_</name></member>
      <member refid="classArmSystem_1af60b9bbcfd0ff2e34f766be48fe3715e" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>enabled</name></member>
      <member refid="classArmSystem_1a838859b74e7b78b173394db035a980cb" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>foldArm</name></member>
      <member refid="classArmSystem_1ae7b62dcab17fbb41137f071eaeb67735" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>getCommandStatus</name></member>
      <member refid="classArmSystem_1aad47744d8d45da74ca2544ccc527516a" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>getEndEffectorPose</name></member>
      <member refid="classBaseRobotSystem_1add092f1cc4faec7b7f1ecb624f54a56a" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>getGoal</name></member>
      <member refid="classBaseRobotSystem_1a22435ca0b28e562a230b4dfdeaffa716" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>getStatus</name></member>
      <member refid="classArmSystem_1ac050d7d49cc7416d5992f102ff2bdc3d" prot="public" virt="virtual"><scope>ArmSystem</scope><name>getSystemStatus</name></member>
      <member refid="classArmSystem_1a408f99ee51cbad8921c7451b75b162fb" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>grip</name></member>
      <member refid="classArmSystem_1a56b52cb9b2b9a250dad2f9608ffd598f" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>power</name></member>
      <member refid="classArmSystem_1a0fe569966065f6e16c49345ee1883552" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>rightArm</name></member>
      <member refid="classBaseRobotSystem_1abad7fac8177f72f932a5ef543408f986" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>runActiveController</name></member>
      <member refid="classBaseRobotSystem_1a2814a05f2648e26d18fe20e1ad0b0c0a" prot="public" virt="non-virtual"><scope>ArmSystem</scope><name>setGoal</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
