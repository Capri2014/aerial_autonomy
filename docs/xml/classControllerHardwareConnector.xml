<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classControllerHardwareConnector" kind="class" prot="public" abstract="yes">
    <compoundname>ControllerHardwareConnector</compoundname>
    <basecompoundref refid="structAbstractControllerHardwareConnector" prot="public" virt="non-virtual">AbstractControllerHardwareConnector</basecompoundref>
    <includes refid="base__controller__hardware__connector_8h" local="no">base_controller_hardware_connector.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>SensorDataType</declname>
        <defname>SensorDataType</defname>
      </param>
      <param>
        <type>class</type>
        <declname>GoalType</declname>
        <defname>GoalType</defname>
      </param>
      <param>
        <type>class</type>
        <declname>ControlType</declname>
        <defname>ControlType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classControllerHardwareConnector_1a1e47c12f796c9cc2fcb5c2495ede2392" prot="protected" static="no" mutable="no">
        <type><ref refid="base__controller__hardware__connector_8h_1ae4dfd42394001deb6e8a0e60c81d6f7a" kindref="member">HardwareType</ref></type>
        <definition>HardwareType ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::hardware_type_</definition>
        <argsstring></argsstring>
        <name>hardware_type_</name>
        <briefdescription>
<para>Type of hardware controlled by the controller. </para>        </briefdescription>
        <detaileddescription>
<para>Used to group controllers. Only one controller will be running per hardware. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="151" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classControllerHardwareConnector_1ab01af9456d2b32a04f63a2eecbc7b24e" prot="private" static="no" mutable="no">
        <type><ref refid="classController" kindref="compound">Controller</ref>&lt; SensorDataType, GoalType, ControlType &gt; &amp;</type>
        <definition>Controller&lt;SensorDataType, GoalType, ControlType&gt;&amp; ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::controller_</definition>
        <argsstring></argsstring>
        <name>controller_</name>
        <briefdescription>
<para>controller class used to perform step function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="157" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classControllerHardwareConnector_1a99ae732204168dfe3659593ed2e6cfb8" prot="private" static="no" mutable="yes">
        <type>boost::mutex</type>
        <definition>boost::mutex ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::controller_status_mutex_</definition>
        <argsstring></argsstring>
        <name>controller_status_mutex_</name>
        <briefdescription>
<para>Synchronize reading and setting controller status. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="161" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classControllerHardwareConnector_1af805169f975bd5d56fc226743a550a35" prot="private" static="no" mutable="no">
        <type><ref refid="base__controller_8h_1addd69ea32460850b571ba88f2a994b73" kindref="member">ControllerStatus</ref></type>
        <definition>ControllerStatus ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::status_</definition>
        <argsstring></argsstring>
        <name>status_</name>
        <briefdescription>
<para>Status of the controller. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="165" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classControllerHardwareConnector_1a6c5d8e5a5ded026ccee3d51f2899ce3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::ControllerHardwareConnector</definition>
        <argsstring>(Controller&lt; SensorDataType, GoalType, ControlType &gt; &amp;controller, HardwareType hardware_type)</argsstring>
        <name>ControllerHardwareConnector</name>
        <param>
          <type><ref refid="classController" kindref="compound">Controller</ref>&lt; SensorDataType, GoalType, ControlType &gt; &amp;</type>
          <declname>controller</declname>
        </param>
        <param>
          <type><ref refid="base__controller__hardware__connector_8h_1ae4dfd42394001deb6e8a0e60c81d6f7a" kindref="member">HardwareType</ref></type>
          <declname>hardware_type</declname>
        </param>
        <briefdescription>
<para>ControlHardwareConnector runs the controller and sends the commands to hardware. </para>        </briefdescription>
        <detaileddescription>
<para>The subclass controlhardwareconnectors should take the required hardware in the constructor and implement the run function to get the command from controller and send to hardware</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classController" kindref="compound">Controller</ref> to run during run function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hardware_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of Hardware. Used to group the connectors and ensure only one connector is running per hardware type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="59" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classControllerHardwareConnector_1afb46464434a3a5881ecc1091f58bbd61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <reimplements refid="structAbstractControllerHardwareConnector_1a0fcf605e19daef2f9f99d4dc2a23feb4">run</reimplements>
        <briefdescription>
<para>Extracts sensor data, run controller and send data back to hardware. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="68" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="68" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classControllerHardwareConnector_1a14ce51377f80b67796fcb50ce8195efd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::setGoal</definition>
        <argsstring>(GoalType goal)</argsstring>
        <name>setGoal</name>
        <param>
          <type>GoalType</type>
          <declname>goal</declname>
        </param>
        <briefdescription>
<para>Set the goal for controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>goal</parametername>
</parameternamelist>
<parameterdescription>
<para>Goal for controller </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="98" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classControllerHardwareConnector_1adccf30ddf2b8be152e53636b1c2d3ad5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GoalType</type>
        <definition>GoalType ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::getGoal</definition>
        <argsstring>() const </argsstring>
        <name>getGoal</name>
        <briefdescription>
<para>Get the goal for controller. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Goal for controller </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="107" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classControllerHardwareConnector_1accd0c9bff560fa3c6d1e60d97644415e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="base__controller__hardware__connector_8h_1ae4dfd42394001deb6e8a0e60c81d6f7a" kindref="member">HardwareType</ref></type>
        <definition>HardwareType ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::getHardwareType</definition>
        <argsstring>()</argsstring>
        <name>getHardwareType</name>
        <briefdescription>
<para>Return the type of hardware (HardwareType) used by the controller. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return the type of hardware used by the controller </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="114" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classControllerHardwareConnector_1a3e69fcccb3826adbd02ea9f7f0740613" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="base__controller_8h_1addd69ea32460850b571ba88f2a994b73" kindref="member">ControllerStatus</ref></type>
        <definition>ControllerStatus ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::getStatus</definition>
        <argsstring>() const </argsstring>
        <name>getStatus</name>
        <briefdescription>
<para>Provide the status of the controller. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The status of the controller </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="121" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="121" bodyend="124"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classControllerHardwareConnector_1ad241af05eac639961a1b07fe7330f054" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::extractSensorData</definition>
        <argsstring>(SensorDataType &amp;sensor_data)=0</argsstring>
        <name>extractSensorData</name>
        <reimplementedby refid="classManualRPYTControllerDroneConnector_1a7271235b60d06ddeae34c18b2cc0b800">extractSensorData</reimplementedby>
        <reimplementedby refid="classBuiltInVelocityControllerDroneConnector_1a8ffb54f94a09f0beea0a46b48feef697">extractSensorData</reimplementedby>
        <reimplementedby refid="classPositionControllerDroneConnector_1a813874b7b677580fc6b5a9a995e79017">extractSensorData</reimplementedby>
        <reimplementedby refid="classVisualServoingControllerDroneConnector_1ae1c2073bf3c7a4c4de967529c076cde8">extractSensorData</reimplementedby>
        <param>
          <type>SensorDataType &amp;</type>
          <declname>sensor_data</declname>
        </param>
        <briefdescription>
<para>extract relevant data from hardware/estimators </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensor_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be updated based on sensor measurements</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if extraction succeeded otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classControllerHardwareConnector_1a5fc86156d5c747aba36497732962d6d0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::sendHardwareCommands</definition>
        <argsstring>(ControlType controls)=0</argsstring>
        <name>sendHardwareCommands</name>
        <reimplementedby refid="classManualRPYTControllerDroneConnector_1a34bde89c4b4f2d0de000b4ccbfc719c4">sendHardwareCommands</reimplementedby>
        <reimplementedby refid="classBuiltInVelocityControllerDroneConnector_1a10a06a14a9a34afbe37c79e86ffd5787">sendHardwareCommands</reimplementedby>
        <reimplementedby refid="classPositionControllerDroneConnector_1a826092eadfbbf9442fa1869fea98070d">sendHardwareCommands</reimplementedby>
        <reimplementedby refid="classVisualServoingControllerDroneConnector_1a139939cb0298d57487f6c3ed488c4448">sendHardwareCommands</reimplementedby>
        <param>
          <type>ControlType</type>
          <declname>controls</declname>
        </param>
        <briefdescription>
<para>Send hardware commands for example UAV rpy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controls</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure the UAV is expecting </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="141" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classControllerHardwareConnector_1a5f4ff35ce3bf94de5a871c02863abadb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;::setStatus</definition>
        <argsstring>(ControllerStatus status)</argsstring>
        <name>setStatus</name>
        <param>
          <type><ref refid="base__controller_8h_1addd69ea32460850b571ba88f2a994b73" kindref="member">ControllerStatus</ref></type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Set the status of the controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>the status of the controller </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="171" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="171" bodyend="174"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Performs a single step of extracting data, running controller and sending data back to hardware. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SensorDataType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of data to take from hardware </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GoalType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of goal for controller </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ControlType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of control sent to hardware </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="411">
        <label>ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;</label>
        <link refid="classControllerHardwareConnector"/>
        <childnode refid="412" relation="public-inheritance">
        </childnode>
      </node>
      <node id="412">
        <label>AbstractControllerHardwareConnector</label>
        <link refid="structAbstractControllerHardwareConnector"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="413">
        <label>ControllerHardwareConnector&lt; SensorDataType, GoalType, ControlType &gt;</label>
        <link refid="classControllerHardwareConnector"/>
        <childnode refid="414" relation="public-inheritance">
        </childnode>
      </node>
      <node id="414">
        <label>AbstractControllerHardwareConnector</label>
        <link refid="structAbstractControllerHardwareConnector"/>
      </node>
    </collaborationgraph>
    <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" line="43" column="1" bodyfile="/home/gowtham/indigo_workspace/src/aerial_autonomy/include/aerial_autonomy/controller_hardware_connectors/base_controller_hardware_connector.h" bodystart="43" bodyend="175"/>
    <listofallmembers>
      <member refid="classControllerHardwareConnector_1ab01af9456d2b32a04f63a2eecbc7b24e" prot="private" virt="non-virtual"><scope>ControllerHardwareConnector</scope><name>controller_</name></member>
      <member refid="classControllerHardwareConnector_1a99ae732204168dfe3659593ed2e6cfb8" prot="private" virt="non-virtual"><scope>ControllerHardwareConnector</scope><name>controller_status_mutex_</name></member>
      <member refid="classControllerHardwareConnector_1a6c5d8e5a5ded026ccee3d51f2899ce3e" prot="public" virt="non-virtual"><scope>ControllerHardwareConnector</scope><name>ControllerHardwareConnector</name></member>
      <member refid="classControllerHardwareConnector_1ad241af05eac639961a1b07fe7330f054" prot="protected" virt="pure-virtual"><scope>ControllerHardwareConnector</scope><name>extractSensorData</name></member>
      <member refid="classControllerHardwareConnector_1adccf30ddf2b8be152e53636b1c2d3ad5" prot="public" virt="non-virtual"><scope>ControllerHardwareConnector</scope><name>getGoal</name></member>
      <member refid="classControllerHardwareConnector_1accd0c9bff560fa3c6d1e60d97644415e" prot="public" virt="non-virtual"><scope>ControllerHardwareConnector</scope><name>getHardwareType</name></member>
      <member refid="classControllerHardwareConnector_1a3e69fcccb3826adbd02ea9f7f0740613" prot="public" virt="non-virtual"><scope>ControllerHardwareConnector</scope><name>getStatus</name></member>
      <member refid="classControllerHardwareConnector_1a1e47c12f796c9cc2fcb5c2495ede2392" prot="protected" virt="non-virtual"><scope>ControllerHardwareConnector</scope><name>hardware_type_</name></member>
      <member refid="classControllerHardwareConnector_1afb46464434a3a5881ecc1091f58bbd61" prot="public" virt="virtual"><scope>ControllerHardwareConnector</scope><name>run</name></member>
      <member refid="classControllerHardwareConnector_1a5fc86156d5c747aba36497732962d6d0" prot="protected" virt="pure-virtual"><scope>ControllerHardwareConnector</scope><name>sendHardwareCommands</name></member>
      <member refid="classControllerHardwareConnector_1a14ce51377f80b67796fcb50ce8195efd" prot="public" virt="non-virtual"><scope>ControllerHardwareConnector</scope><name>setGoal</name></member>
      <member refid="classControllerHardwareConnector_1a5f4ff35ce3bf94de5a871c02863abadb" prot="private" virt="non-virtual"><scope>ControllerHardwareConnector</scope><name>setStatus</name></member>
      <member refid="classControllerHardwareConnector_1af805169f975bd5d56fc226743a550a35" prot="private" virt="non-virtual"><scope>ControllerHardwareConnector</scope><name>status_</name></member>
      <member refid="structAbstractControllerHardwareConnector_1a06f931d74faac604c3ef56cb5ba75399" prot="public" virt="virtual"><scope>ControllerHardwareConnector</scope><name>~AbstractControllerHardwareConnector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
