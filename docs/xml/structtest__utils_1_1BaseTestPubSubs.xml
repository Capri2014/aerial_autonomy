<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="structtest__utils_1_1BaseTestPubSubs" kind="struct" prot="public">
    <compoundname>test_utils::BaseTestPubSubs</compoundname>
    <includes refid="test__utils_8h" local="no">test_utils.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structtest__utils_1_1BaseTestPubSubs_1a0686c489b17c5feb50729b84ca1bf680" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string test_utils::BaseTestPubSubs::status_</definition>
        <argsstring></argsstring>
        <name>status_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="102" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtest__utils_1_1BaseTestPubSubs_1a7d2eaa956a93e4294ca30b09471068ef" prot="protected" static="no" mutable="no">
        <type>ros::NodeHandle</type>
        <definition>ros::NodeHandle test_utils::BaseTestPubSubs::nh_send_</definition>
        <argsstring></argsstring>
        <name>nh_send_</name>
        <briefdescription>
<para>Send events. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="103" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtest__utils_1_1BaseTestPubSubs_1ab1d5a6683b0a7aa14d121f7b5987d858" prot="protected" static="no" mutable="no">
        <type>ros::NodeHandle</type>
        <definition>ros::NodeHandle test_utils::BaseTestPubSubs::nh_receive_status_</definition>
        <argsstring></argsstring>
        <name>nh_receive_status_</name>
        <briefdescription>
<para>Receive status. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="104" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtest__utils_1_1BaseTestPubSubs_1ae69a793b2ca42cca45bf99120a84c553" prot="protected" static="no" mutable="no">
        <type>ros::Publisher</type>
        <definition>ros::Publisher test_utils::BaseTestPubSubs::event_pub_</definition>
        <argsstring></argsstring>
        <name>event_pub_</name>
        <briefdescription>
<para>Event publisher. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="105" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtest__utils_1_1BaseTestPubSubs_1a2f47af8bb887fda6469363697b722468" prot="protected" static="no" mutable="no">
        <type>ros::Publisher</type>
        <definition>ros::Publisher test_utils::BaseTestPubSubs::pose_pub_</definition>
        <argsstring></argsstring>
        <name>pose_pub_</name>
        <briefdescription>
<para>Pose command publisher. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="106" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtest__utils_1_1BaseTestPubSubs_1af85fa0683a70df68d885b8a62c70cf0d" prot="protected" static="no" mutable="no">
        <type>ros::Subscriber</type>
        <definition>ros::Subscriber test_utils::BaseTestPubSubs::status_subscriber_</definition>
        <argsstring></argsstring>
        <name>status_subscriber_</name>
        <briefdescription>
<para>System status subscriber. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="107" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structtest__utils_1_1BaseTestPubSubs_1aac689567e9ffa15462b281359ba6b6c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>test_utils::BaseTestPubSubs::BaseTestPubSubs</definition>
        <argsstring>()</argsstring>
        <name>BaseTestPubSubs</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Initializes event, pose publishers, and system status subscriber </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="48" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structtest__utils_1_1BaseTestPubSubs_1ab751c54f2259762b47dcf50f3eb831bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void test_utils::BaseTestPubSubs::publishEvent</definition>
        <argsstring>(std::string event)</argsstring>
        <name>publishEvent</name>
        <param>
          <type>std::string</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Helper function to publish specified event specified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to publish </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="60" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structtest__utils_1_1BaseTestPubSubs_1ab82b93466f34d0ef84b483c57b8f5e5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void test_utils::BaseTestPubSubs::publishPoseCommand</definition>
        <argsstring>(PositionYaw position_yaw)</argsstring>
        <name>publishPoseCommand</name>
        <param>
          <type><ref refid="structPositionYaw" kindref="compound">PositionYaw</ref></type>
          <declname>position_yaw</declname>
        </param>
        <briefdescription>
<para>Helper function to publish specified position_yaw command. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position_yaw</parametername>
</parameternamelist>
<parameterdescription>
<para>position and yaw to publish </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="71" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="71" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structtest__utils_1_1BaseTestPubSubs_1ae1f68f7eb038f65472f49d29ee10c29a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structPositionYaw" kindref="compound">PositionYaw</ref></type>
        <definition>PositionYaw test_utils::BaseTestPubSubs::getPositionYaw</definition>
        <argsstring>(parsernode::common::quaddata quad_data)</argsstring>
        <name>getPositionYaw</name>
        <param>
          <type>parsernode::common::quaddata</type>
          <declname>quad_data</declname>
        </param>
        <briefdescription>
<para>Helper function to return position and yaw from UAV data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quad_data</parametername>
</parameternamelist>
<parameterdescription>
<para>UAV data returned by uav system</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structPosition" kindref="compound">Position</ref> and yaw of UAV </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="88" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structtest__utils_1_1BaseTestPubSubs_1a075da5fbbbb376c1ee5744eb295a36ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_utils::BaseTestPubSubs::isStatusConnected</definition>
        <argsstring>()</argsstring>
        <name>isStatusConnected</name>
        <briefdescription>
<para>Helper function to check if status subscriber to connected UAV status publisher. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if connected </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="99" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="99" bodyend="99"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structtest__utils_1_1BaseTestPubSubs_1ac49d35a9faa997e96793087536b8ffc0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void test_utils::BaseTestPubSubs::statusCallback</definition>
        <argsstring>(std_msgs::String status)</argsstring>
        <name>statusCallback</name>
        <param>
          <type>std_msgs::String</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Callback to set the status received from UAV. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Text status received from UAV </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="114" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="114" bodyend="114"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base Test fixture class for reducing code redundancy in system handler tests. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" line="42" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/tests/test_utils.h" bodystart="42" bodyend="115"/>
    <listofallmembers>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1aac689567e9ffa15462b281359ba6b6c9" prot="public" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>BaseTestPubSubs</name></member>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1ae69a793b2ca42cca45bf99120a84c553" prot="protected" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>event_pub_</name></member>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1ae1f68f7eb038f65472f49d29ee10c29a" prot="public" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>getPositionYaw</name></member>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1a075da5fbbbb376c1ee5744eb295a36ef" prot="public" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>isStatusConnected</name></member>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1ab1d5a6683b0a7aa14d121f7b5987d858" prot="protected" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>nh_receive_status_</name></member>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1a7d2eaa956a93e4294ca30b09471068ef" prot="protected" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>nh_send_</name></member>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1a2f47af8bb887fda6469363697b722468" prot="protected" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>pose_pub_</name></member>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1ab751c54f2259762b47dcf50f3eb831bb" prot="public" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>publishEvent</name></member>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1ab82b93466f34d0ef84b483c57b8f5e5f" prot="public" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>publishPoseCommand</name></member>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1a0686c489b17c5feb50729b84ca1bf680" prot="protected" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>status_</name></member>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1af85fa0683a70df68d885b8a62c70cf0d" prot="protected" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>status_subscriber_</name></member>
      <member refid="structtest__utils_1_1BaseTestPubSubs_1ac49d35a9faa997e96793087536b8ffc0" prot="protected" virt="non-virtual"><scope>test_utils::BaseTestPubSubs</scope><name>statusCallback</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
