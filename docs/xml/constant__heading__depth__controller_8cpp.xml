<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="constant__heading__depth__controller_8cpp" kind="file">
    <compoundname>constant_heading_depth_controller.cpp</compoundname>
    <includes refid="constant__heading__depth__controller_8h" local="yes">aerial_autonomy/controllers/constant_heading_depth_controller.h</includes>
    <includes refid="math_8h" local="yes">aerial_autonomy/common/math.h</includes>
    <includes local="no">glog/logging.h</includes>
    <incdepgraph>
      <node id="7330">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="7341">
        <label>aerial_autonomy/types/velocity.h</label>
        <link refid="velocity_8h"/>
      </node>
      <node id="7343">
        <label>glog/logging.h</label>
      </node>
      <node id="7336">
        <label>cmath</label>
      </node>
      <node id="7338">
        <label>stdexcept</label>
      </node>
      <node id="7342">
        <label>constant_heading_depth_controller_config.pb.h</label>
      </node>
      <node id="7332">
        <label>string</label>
      </node>
      <node id="7339">
        <label>tf/tf.h</label>
      </node>
      <node id="7326">
        <label>src/controllers/constant_heading_depth_controller.cpp</label>
        <link refid="constant_heading_depth_controller.cpp"/>
        <childnode refid="7327" relation="include">
        </childnode>
        <childnode refid="7337" relation="include">
        </childnode>
        <childnode refid="7343" relation="include">
        </childnode>
      </node>
      <node id="7337">
        <label>aerial_autonomy/common/math.h</label>
        <link refid="math_8h"/>
        <childnode refid="7336" relation="include">
        </childnode>
        <childnode refid="7338" relation="include">
        </childnode>
        <childnode refid="7339" relation="include">
        </childnode>
      </node>
      <node id="7331">
        <label>aerial_autonomy/common/controller_status.h</label>
        <link refid="controller__status_8h"/>
        <childnode refid="7332" relation="include">
        </childnode>
        <childnode refid="7333" relation="include">
        </childnode>
      </node>
      <node id="7340">
        <label>aerial_autonomy/types/velocity_yaw_rate.h</label>
        <link refid="velocity__yaw__rate_8h"/>
        <childnode refid="7341" relation="include">
        </childnode>
      </node>
      <node id="7333">
        <label>vector</label>
      </node>
      <node id="7328">
        <label>aerial_autonomy/controllers/base_controller.h</label>
        <link refid="base__controller_8h"/>
        <childnode refid="7329" relation="include">
        </childnode>
        <childnode refid="7331" relation="include">
        </childnode>
      </node>
      <node id="7334">
        <label>aerial_autonomy/types/position_yaw.h</label>
        <link refid="position__yaw_8h"/>
        <childnode refid="7335" relation="include">
        </childnode>
        <childnode refid="7337" relation="include">
        </childnode>
      </node>
      <node id="7335">
        <label>aerial_autonomy/types/position.h</label>
        <link refid="position_8h"/>
        <childnode refid="7336" relation="include">
        </childnode>
      </node>
      <node id="7329">
        <label>aerial_autonomy/common/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="7330" relation="include">
        </childnode>
      </node>
      <node id="7327">
        <label>aerial_autonomy/controllers/constant_heading_depth_controller.h</label>
        <link refid="constant__heading__depth__controller_8h"/>
        <childnode refid="7328" relation="include">
        </childnode>
        <childnode refid="7334" relation="include">
        </childnode>
        <childnode refid="7340" relation="include">
        </childnode>
        <childnode refid="7342" relation="include">
        </childnode>
        <childnode refid="7339" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="constant__heading__depth__controller_8h" kindref="compound">aerial_autonomy/controllers/constant_heading_depth_controller.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="math_8h" kindref="compound">aerial_autonomy/common/math.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glog/logging.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classConstantHeadingDepthController_1a3c7320e1b93e5f8b42f51dd23df3a116" kindref="member">ConstantHeadingDepthController::runImplementation</ref>(</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPositionYaw" kindref="compound">PositionYaw</ref><sp/>sensor_data,<sp/><ref refid="structPosition" kindref="compound">Position</ref><sp/>goal,<sp/><ref refid="structVelocityYawRate" kindref="compound">VelocityYawRate</ref><sp/>&amp;control)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/>tf::Vector3<sp/>current_tracking_vector(sensor_data.<ref refid="structPosition_1a9abbe738bad177de91fe4774099c1260" kindref="member">x</ref>,<sp/>sensor_data.<ref refid="structPosition_1a75f48c2a1d2c7131b8be1a0687ae72c8" kindref="member">y</ref>,</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor_data.<ref refid="structPosition_1ab26043bc2f8f6094818c17dd44e43228" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>tf::Vector3<sp/>desired_tracking_vector(goal.<ref refid="structPosition_1a9abbe738bad177de91fe4774099c1260" kindref="member">x</ref>,<sp/>goal.<ref refid="structPosition_1a75f48c2a1d2c7131b8be1a0687ae72c8" kindref="member">y</ref>,<sp/>goal.<ref refid="structPosition_1ab26043bc2f8f6094818c17dd44e43228" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>tf::Vector3<sp/>desired_tracking_direction<sp/>=</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>desired_tracking_vector<sp/>/<sp/>desired_tracking_vector.length();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>tf::Vector3<sp/>tracking_error<sp/>=</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(current_tracking_vector<sp/>-<sp/>desired_tracking_vector);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>tf::Vector3<sp/>tracking_error_radial<sp/>=</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>desired_tracking_direction<sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(tracking_error.dot(desired_tracking_direction));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>tf::Vector3<sp/>tracking_error_tangential<sp/>=</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tracking_error<sp/>-<sp/>tracking_error_radial;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>tf::Vector3<sp/>desired_vel_tf<sp/>=</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tracking_error_radial<sp/>*<sp/><ref refid="classConstantHeadingDepthController_1aae0505b21217af365a8a2a0a19be274c" kindref="member">config_</ref>.radial_gain()<sp/>+</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tracking_error_tangential<sp/>*<sp/><ref refid="classConstantHeadingDepthController_1aae0505b21217af365a8a2a0a19be274c" kindref="member">config_</ref>.tangential_gain();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(desired_vel_tf.length()<sp/>&gt;<sp/><ref refid="classConstantHeadingDepthController_1aae0505b21217af365a8a2a0a19be274c" kindref="member">config_</ref>.max_velocity())<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>desired_vel_tf<sp/>*=<sp/><ref refid="classConstantHeadingDepthController_1aae0505b21217af365a8a2a0a19be274c" kindref="member">config_</ref>.max_velocity()<sp/>/<sp/>desired_vel_tf.length();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(desired_vel_tf.length()<sp/>&lt;<sp/><ref refid="classConstantHeadingDepthController_1aae0505b21217af365a8a2a0a19be274c" kindref="member">config_</ref>.min_velocity())<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>desired_vel_tf<sp/>*=<sp/><ref refid="classConstantHeadingDepthController_1aae0505b21217af365a8a2a0a19be274c" kindref="member">config_</ref>.min_velocity()<sp/>/<sp/>desired_vel_tf.length();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error_yaw<sp/>=</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemath_1a5948c30f26d082a30d534de02beed3d1" kindref="member">math::angleWrap</ref>(std::atan2(desired_tracking_direction.getY(),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desired_tracking_direction.getX())<sp/>-</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor_data.<ref refid="structPositionYaw_1a712a15ba9739cb5f4e31ea973074b8bf" kindref="member">yaw</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw_rate<sp/>=</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemath_1a6d507253f29fa253416474c4364b50f7" kindref="member">math::clamp</ref>(<ref refid="classConstantHeadingDepthController_1aae0505b21217af365a8a2a0a19be274c" kindref="member">config_</ref>.yaw_gain()<sp/>*<sp/>error_yaw,<sp/>-<ref refid="classConstantHeadingDepthController_1aae0505b21217af365a8a2a0a19be274c" kindref="member">config_</ref>.max_yaw_rate(),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classConstantHeadingDepthController_1aae0505b21217af365a8a2a0a19be274c" kindref="member">config_</ref>.max_yaw_rate());</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>control<sp/>=<sp/><ref refid="structVelocityYawRate" kindref="compound">VelocityYawRate</ref>(desired_vel_tf.getX(),<sp/>desired_vel_tf.getY(),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desired_vel_tf.getZ(),<sp/>yaw_rate);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="classControllerStatus" kindref="compound">ControllerStatus</ref><sp/><ref refid="classConstantHeadingDepthController_1ab481e32f5f27718075ddaafc7d45e972" kindref="member">ConstantHeadingDepthController::isConvergedImplementation</ref>(</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPositionYaw" kindref="compound">PositionYaw</ref><sp/>sensor_data,<sp/><ref refid="structPosition" kindref="compound">Position</ref><sp/>goal)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error_yaw<sp/>=</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemath_1a5948c30f26d082a30d534de02beed3d1" kindref="member">math::angleWrap</ref>(std::atan2(goal.<ref refid="structPosition_1a75f48c2a1d2c7131b8be1a0687ae72c8" kindref="member">y</ref>,<sp/>goal.<ref refid="structPosition_1a9abbe738bad177de91fe4774099c1260" kindref="member">x</ref>)<sp/>-<sp/>sensor_data.<ref refid="structPositionYaw_1a712a15ba9739cb5f4e31ea973074b8bf" kindref="member">yaw</ref>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="structPosition" kindref="compound">Position</ref><sp/>error<sp/>=<sp/><ref refid="structPosition" kindref="compound">Position</ref>(sensor_data.<ref refid="structPosition_1a9abbe738bad177de91fe4774099c1260" kindref="member">x</ref>,<sp/>sensor_data.<ref refid="structPosition_1a75f48c2a1d2c7131b8be1a0687ae72c8" kindref="member">y</ref>,<sp/>sensor_data.<ref refid="structPosition_1ab26043bc2f8f6094818c17dd44e43228" kindref="member">z</ref>)<sp/>-<sp/>goal;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="classControllerStatus" kindref="compound">ControllerStatus</ref><sp/>status(<ref refid="classControllerStatus_1acd360c44887ebd5ef32a532c29219cd5abd1aa4e51539cd0c71d10d8317b3d516" kindref="member">ControllerStatus::Active</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>status<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Error<sp/>Position,<sp/>Yaw:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error.<ref refid="structPosition_1a9abbe738bad177de91fe4774099c1260" kindref="member">x</ref><sp/>&lt;&lt;<sp/>error.<ref refid="structPosition_1a75f48c2a1d2c7131b8be1a0687ae72c8" kindref="member">y</ref><sp/>&lt;&lt;<sp/>error.<ref refid="structPosition_1ab26043bc2f8f6094818c17dd44e43228" kindref="member">z</ref></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>error_yaw;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PositionControllerConfig<sp/>&amp;position_controller_config<sp/>=</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classConstantHeadingDepthController_1aae0505b21217af365a8a2a0a19be274c" kindref="member">config_</ref>.position_controller_config();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>config::Position<sp/>&amp;tolerance_pos<sp/>=</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>position_controller_config.goal_position_tolerance();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;tolerance_yaw<sp/>=<sp/>position_controller_config.goal_yaw_tolerance();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(error.<ref refid="structPosition_1a9abbe738bad177de91fe4774099c1260" kindref="member">x</ref>)<sp/>&lt;<sp/>tolerance_pos.x()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::abs(error.<ref refid="structPosition_1a75f48c2a1d2c7131b8be1a0687ae72c8" kindref="member">y</ref>)<sp/>&lt;<sp/>tolerance_pos.y()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::abs(error.<ref refid="structPosition_1ab26043bc2f8f6094818c17dd44e43228" kindref="member">z</ref>)<sp/>&lt;<sp/>tolerance_pos.z()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::abs(error_yaw)<sp/>&lt;<sp/>tolerance_yaw)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOG_EVERY_N(1,<sp/>50)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reached<sp/>goal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>status.setStatus(<ref refid="classControllerStatus_1acd360c44887ebd5ef32a532c29219cd5a423a9e7373b9fa345a476136ba29fc05" kindref="member">ControllerStatus::Completed</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Reached<sp/>Goal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/matt/catkin_ws/src/aerial_autonomy/src/controllers/constant_heading_depth_controller.cpp"/>
  </compounddef>
</doxygen>
