<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="math_8cpp" kind="file">
    <compoundname>math.cpp</compoundname>
    <includes refid="math_8h" local="yes">aerial_autonomy/common/math.h</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="4086">
        <label>cmath</label>
      </node>
      <node id="4087">
        <label>stdexcept</label>
      </node>
      <node id="4088">
        <label>tf/tf.h</label>
      </node>
      <node id="4084">
        <label>src/common/math.cpp</label>
        <link refid="math.cpp"/>
        <childnode refid="4085" relation="include">
        </childnode>
        <childnode refid="4089" relation="include">
        </childnode>
      </node>
      <node id="4085">
        <label>aerial_autonomy/common/math.h</label>
        <link refid="math_8h"/>
        <childnode refid="4086" relation="include">
        </childnode>
        <childnode refid="4087" relation="include">
        </childnode>
        <childnode refid="4088" relation="include">
        </childnode>
      </node>
      <node id="4089">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemath">math</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="math_8h" kindref="compound">aerial_autonomy/common/math.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="namespacemath" refkind="compound"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">math<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacemath_1a5948c30f26d082a30d534de02beed3d1" kindref="member">angleWrap</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>std::fmod(x<sp/>+<sp/>M_PI,<sp/>2<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>2<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>-<sp/>M_PI;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacemath_1a6d507253f29fa253416474c4364b50f7" kindref="member">clamp</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::min(std::max(x,<sp/>min),<sp/>max);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/gowtham/indigo_workspace/src/aerial_autonomy/src/common/math.cpp"/>
  </compounddef>
</doxygen>
