<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="creating__autonomy__application_8md" kind="file">
    <compoundname>creating_autonomy_application.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#<sp/>Creating<sp/>an<sp/>Autonomy<sp/>Application</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="normal">To<sp/>create<sp/>a<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>autonomy<sp/>application,<sp/>we<sp/>need<sp/>to<sp/>create<sp/>a<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>state<sp/>machine<sp/>which<sp/>defines<sp/>the<sp/>logic<sp/>flow<sp/>and<sp/>a<sp/>robot<sp/>system<sp/>which<sp/>coordinates<sp/>the<sp/>hardware<sp/>on<sp/>the<sp/>physical<sp/>(or<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal">)<sp/>robot.</highlight></codeline>
<codeline lineno="3"><highlight class="normal">We<sp/>need<sp/>to<sp/>implement<sp/>the<sp/>following<sp/>components:</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">|<sp/>Component<sp/>|<sp/>Description<sp/>|</highlight></codeline>
<codeline lineno="6"><highlight class="normal">|-----------|-------------|</highlight></codeline>
<codeline lineno="7"><highlight class="normal">|<sp/>Robot<sp/>System<sp/>|<sp/>Provides<sp/>sensor<sp/>data<sp/>and<sp/>accepts<sp/>control<sp/>commands<sp/>|</highlight></codeline>
<codeline lineno="8"><highlight class="normal">|<sp/>Robot<sp/>System<sp/>Handler<sp/>|<sp/>Instantiates<sp/>robot<sp/>system<sp/>and<sp/>manages<sp/>its<sp/>control<sp/>threads<sp/>|</highlight></codeline>
<codeline lineno="9"><highlight class="normal">|<sp/>Actions<sp/>|<sp/>Commands<sp/>to<sp/>execute<sp/>when<sp/>switching<sp/>between<sp/>states<sp/>|</highlight></codeline>
<codeline lineno="10"><highlight class="normal">|<sp/>Guards<sp/>|<sp/>Check<sp/>if<sp/>the<sp/>transition<sp/>between<sp/>states<sp/>is<sp/>valid<sp/>or<sp/>not<sp/>|</highlight></codeline>
<codeline lineno="11"><highlight class="normal">|<sp/>Internal<sp/>Actions<sp/>|<sp/>Process<sp/>robot<sp/>state<sp/>continuously<sp/>and<sp/>trigger<sp/>actions<sp/>accordingly<sp/>|</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">##<sp/>Creating<sp/>a<sp/>Robot<sp/>System</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="normal">A<sp/>robot<sp/>system<sp/>is<sp/>responsible<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>owning<sp/>any<sp/>[ControllerHardwareConnectors](markdown/class_groups.md)<sp/>and<sp/>interacting<sp/>with<sp/>any<sp/>hardware<sp/>that<sp/>the<sp/>autonomy<sp/>application<sp/>will<sp/>be<sp/>utilizing.<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal">Examples<sp/>can<sp/>be<sp/>found<sp/>in<sp/>[include/robot_systems](https:</highlight><highlight class="comment">//github.com/jhu-asco/aerial_autonomy/tree/master/include/aerial_autonomy/robot_systems).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">New<sp/>robot<sp/>systems<sp/>should<sp/>extend<sp/><ref refid="classBaseRobotSystem" kindref="compound">BaseRobotSystem</ref><sp/>and<sp/>add<sp/>any<sp/>ControllerHardwareConnectors<sp/>to<sp/>the<sp/>system<sp/>in<sp/>the<sp/>derived<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>constructor<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">`controller_hardware_connector_container_.setObject(my_controller_connector_)`.<sp/><sp/>Keep<sp/>in<sp/>mind<sp/>that<sp/>only<sp/>one<sp/>instance<sp/>of<sp/>each<sp/><ref refid="classControllerHardwareConnector" kindref="compound">ControllerHardwareConnector</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">type<sp/>can<sp/>be<sp/>stored<sp/>in<sp/>the<sp/>container.<sp/><sp/>The<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>robot<sp/>system<sp/>should<sp/>expose<sp/>any<sp/>additional<sp/>hardware<sp/>functionality<sp/>that<sp/>will<sp/>be<sp/>used<sp/>in<sp/>the<sp/>state<sp/>machine,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/>e.g.<sp/>`takeoff()`<sp/>or<sp/>`land()`<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>`<ref refid="classUAVSystem" kindref="compound">UAVSystem</ref>`.</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">The<sp/>state<sp/>machine<sp/>actions<sp/>will<sp/>have<sp/>access<sp/>to<sp/>the<sp/>robot<sp/>system<sp/>and<sp/>interact<sp/>with<sp/>controllers<sp/>by<sp/>calling<sp/>the<sp/>robot<sp/>system<sp/>`setGoal`<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>templated<sp/>on<sp/>the<sp/>controller<sp/>it<sp/>wants<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="23"><highlight class="normal">to<sp/>navigate<sp/>to<sp/>the<sp/>given<sp/>goal.</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">##<sp/>Creating<sp/>Actions</highlight></codeline>
<codeline lineno="26"><highlight class="normal">Actions<sp/>define<sp/>commands<sp/>to<sp/>execute<sp/>when<sp/>transitioning<sp/>between<sp/>states.<sp/><sp/>Examples<sp/>can<sp/>be<sp/>found<sp/>in<sp/>`include/actions_guards`.</highlight></codeline>
<codeline lineno="27"><highlight class="normal">Actions<sp/>which<sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>not<sp/>need<sp/>access<sp/>to<sp/>the<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>which<sp/>triggered<sp/>the<sp/>action<sp/>should<sp/>derive<sp/>from<sp/>`<ref refid="structEventAgnosticActionFunctor" kindref="compound">EventAgnosticActionFunctor&lt;RobotSystemT, LogicStateMachineT&gt;</ref>`</highlight></codeline>
<codeline lineno="28"><highlight class="normal">and<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>the<sp/>`run(RobotSystemT&amp;<sp/>LogicStateMachineT&amp;)`<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>with<sp/>the<sp/>command<sp/>to<sp/>be<sp/>executed.<sp/>See<sp/>`include/land_functors.h`<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>an<sp/>example.<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">Actions<sp/>which<sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>need<sp/>access<sp/>to<sp/>the<sp/>triggering<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>should<sp/>derive<sp/>from<sp/>`<ref refid="structActionFunctor" kindref="compound">ActionFunctor&lt;EventT, RobotSystemT, LogicStateMachineT&gt;</ref>`<sp/>and<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>the<sp/>run<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">with<sp/>the<sp/>command<sp/>to<sp/>execute.<sp/><sp/>See<sp/>`include/position_control_functors.h`<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>an<sp/>example.</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">##<sp/>Creating<sp/>Internal<sp/>Actions</highlight></codeline>
<codeline lineno="34"><highlight class="normal">Internal<sp/>actions<sp/>define<sp/>a<sp/>behavior<sp/>that<sp/>is<sp/>executed<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>in<sp/>a<sp/>particular<sp/>state.<sp/><sp/>They<sp/>should<sp/>derive<sp/>from<sp/>`<ref refid="structEventAgnosticActionFunctor" kindref="compound">EventAgnosticActionFunctor&lt;RobotSystemT, LogicStateMachineT&gt;</ref>`</highlight></codeline>
<codeline lineno="35"><highlight class="normal">and<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>its<sp/>`run`<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>with<sp/>the<sp/>intended<sp/>behavior.<sp/><sp/>See<sp/>`<ref refid="structPositionControlInternalActionFunctor__" kindref="compound">PositionControlInternalActionFunctor_</ref>`<sp/>in<sp/>`include/position_control_functors.h`<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>an<sp/>example.</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">##<sp/>Creating<sp/>Guards</highlight></codeline>
<codeline lineno="38"><highlight class="normal">Guards<sp/>check<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>a<sp/>triggered<sp/>transition<sp/>between<sp/>states<sp/>is<sp/>valid<sp/>or<sp/>not.<sp/><sp/>For<sp/>example,<sp/>the<sp/>`<ref refid="structTakeoffTransitionGuardFunctor__" kindref="compound">TakeoffTransitionGuardFunctor_</ref>`<sp/>keeps<sp/>a<sp/>`<ref refid="classUAVSystem" kindref="compound">UAVSystem</ref>`<sp/>from<sp/>taking<sp/>off<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>the<sp/>battery<sp/>level<sp/>percentage</highlight></codeline>
<codeline lineno="39"><highlight class="normal">is<sp/>below<sp/>some<sp/>threshold.<sp/><sp/>Guards<sp/>which<sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>not<sp/>need<sp/>access<sp/>to<sp/>the<sp/>triggering<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>should<sp/>derive<sp/>from<sp/>`<ref refid="structEventAgnosticGuardFunctor" kindref="compound">EventAgnosticGuardFunctor&lt;RobotSystemT, LogicStateMachineT&gt;</ref>`<sp/>and<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>the<sp/>`guard`<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">to<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>when<sp/>a<sp/>transition<sp/>is<sp/>valid<sp/>and<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>otherwise.<sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">Guards<sp/>which<sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>need<sp/>access<sp/>to<sp/>the<sp/>triggering<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>should<sp/>inherit<sp/>from<sp/>`<ref refid="structGuardFunctor" kindref="compound">GuardFunctor&lt;EventT, RobotSystemT, LogicStateMachineT&gt;</ref>`<sp/>and<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>its<sp/>`guard`<sp/>fuction.<sp/>See<sp/>`<ref refid="structPositionControlTransitionGuardFunctor__" kindref="compound">PositionControlTransitionGuardFunctor_</ref>`<sp/>in<sp/>`include/position_control_functors.h`<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>an<sp/>example.</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">##<sp/>Creating<sp/>a<sp/>State<sp/>Machine</highlight></codeline>
<codeline lineno="45"><highlight class="normal">The<sp/>state<sp/>machine<sp/>defines<sp/>the<sp/>logic<sp/>of<sp/>the<sp/>system<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>the<sp/>defined<sp/>actions,<sp/>states,<sp/>and<sp/>guards.<sp/><sp/>A<sp/></highlight><highlight class="stringliteral">&quot;front<sp/>end&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>state<sp/>machine<sp/>defines<sp/>the<sp/>connections<sp/>and<sp/>transitions<sp/>between<sp/>states.</highlight></codeline>
<codeline lineno="46"><highlight class="normal">The<sp/>front<sp/><ref refid="iterable__enum_8h_1a1dbdd362a66f0118f8da85eb59002155" kindref="member">end</ref><sp/>should<sp/>derive<sp/>from<sp/>both<sp/>`msmf::state_machine_def&lt;StateMachineFrontEnd&gt;`<sp/>and<sp/>`<ref refid="classBaseStateMachine" kindref="compound">BaseStateMachine&lt;RobotSystemT&gt;</ref>`.<sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal">Its<sp/>`transition_table`<sp/>will<sp/>define<sp/>the<sp/>state<sp/>machine<sp/>itself<sp/>by<sp/>specifying<sp/>which<sp/>action<sp/>will<sp/>cause<sp/>which<sp/>state<sp/>transitions<sp/>and<sp/>which<sp/>guards<sp/>will<sp/>check<sp/>the<sp/>validity<sp/>of<sp/>the<sp/>transitions.<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal">See<sp/>`include/state_machines/uav_state_machine.h`<sp/>and<sp/>its<sp/>associated<sp/>flow<sp/>chart<sp/>below<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>an<sp/>example<sp/>and<sp/>see<sp/>[here](http:</highlight><highlight class="comment">//www.boost.org/doc/libs/1_63_0/libs/msm/doc/HTML/ch03s02.html)<sp/>for<sp/>a<sp/>more<sp/>in<sp/>depth<sp/>explanation<sp/>of<sp/>the<sp/>underlying<sp/>boost<sp/>mechanisms.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">![alt<sp/>text](state_machine.png<sp/></highlight><highlight class="stringliteral">&quot;Example<sp/>State<sp/>Machine&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">The<sp/>state<sp/>machine<sp/>that<sp/>we<sp/>will<sp/>interact<sp/>with<sp/>will<sp/>be<sp/>of<sp/>type<sp/>`<ref refid="classboost_1_1msm_1_1back_1_1thread__safe__state__machine" kindref="compound">boost::msm::back::thread_safe_state_machine&lt;StateMachineFrontEnd&gt;</ref>`.</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">Any<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>state<sp/>machine<sp/>must<sp/>include<sp/>`</highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classBaseStateMachine" kindref="compound">BaseStateMachine&lt;UAVSystem&gt;::no_transition</ref>`<sp/>to<sp/>avoid<sp/>type<sp/>ambiguities.</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">##<sp/>Creating<sp/>a<sp/>System<sp/>Handler</highlight></codeline>
<codeline lineno="57"><highlight class="normal">The<sp/>system<sp/>handler<sp/>should<sp/>have<sp/>a<sp/>member<sp/>of<sp/>type<sp/>`<ref refid="classCommonSystemHandler" kindref="compound">CommonSystemHandler&lt;LogicStateMachineT, EventManagerT, RobotSystemT&gt;</ref>`,<sp/>which<sp/>will<sp/>automatically<sp/>take<sp/>care<sp/>of<sp/>instantiating<sp/>and<sp/>managing<sp/>the<sp/>logic<sp/>state<sp/>machine<sp/>it<sp/>is<sp/>templated<sp/>on.<sp/><sp/>The<sp/>system<sp/>handler<sp/>must<sp/>call<sp/>the<sp/><ref refid="classCommonSystemHandler" kindref="compound">CommonSystemHandler</ref><sp/>`startTimers`<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>to<sp/>start<sp/>the<sp/>state<sp/>machine.</highlight></codeline>
<codeline lineno="58"><highlight class="normal">The<sp/>system<sp/>handler<sp/>will<sp/>need<sp/>to<sp/>instantiate<sp/>the<sp/>robot<sp/>system<sp/>and<sp/>any<sp/>hardware<sp/>drivers<sp/>and<sp/>spawn<sp/>any<sp/>timers<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>stepping<sp/>controllers<sp/>owned<sp/>by<sp/>the<sp/>robot<sp/>system.<sp/>See<sp/>`include/system_handlers/uav_system_handler.h`<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>an<sp/>example.</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">##<sp/>Creating<sp/>a<sp/>Node</highlight></codeline>
<codeline lineno="61"><highlight class="normal">Create<sp/>an<sp/>executable<sp/>with<sp/>the<sp/>following<sp/>structure:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="uav__system__node_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::init(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::NodeHandle<sp/>nh;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>config<sp/>into<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MySystemHandler&lt;MyStateMachine,<sp/>MyEventManager&gt;(nh,<sp/>config)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::spin();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">See<sp/>`src/system_handler_nodes/uav_system_node.cpp`<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>an<sp/>example.</highlight></codeline>
    </programlisting>
    <location file="/home/matt/catkin_ws/src/aerial_autonomy/markdown/creating_autonomy_application.md"/>
  </compounddef>
</doxygen>
