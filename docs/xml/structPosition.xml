<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="structPosition" kind="struct" prot="public">
    <compoundname>Position</compoundname>
    <derivedcompoundref refid="structPositionYaw" prot="public" virt="non-virtual">PositionYaw</derivedcompoundref>
    <includes refid="position_8h" local="no">position.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structPosition_1a9abbe738bad177de91fe4774099c1260" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Position::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <briefdescription>
<para>x component in m </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="22" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structPosition_1a75f48c2a1d2c7131b8be1a0687ae72c8" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Position::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <briefdescription>
<para>y component in m </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="23" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structPosition_1ab26043bc2f8f6094818c17dd44e43228" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Position::z</definition>
        <argsstring></argsstring>
        <name>z</name>
        <briefdescription>
<para>z component in m </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="24" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structPosition_1a369a577425f8ba02e8750d04b6a088db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Position::Position</definition>
        <argsstring>()</argsstring>
        <name>Position</name>
        <briefdescription>
<para>Implicit constructor Instantiate position to (0,0,0)m. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="13" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="13" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="structPosition_1a039074b4b66e3b570ea2f4e14583b0e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Position::Position</definition>
        <argsstring>(double x, double y, double z)</argsstring>
        <name>Position</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Explicit constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x component in m </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y component in m </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>z component in m </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="21" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="structPosition_1ac8dc0750468e3ca1a526d2dfcb0e030e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Position::norm</definition>
        <argsstring>() const </argsstring>
        <name>norm</name>
        <briefdescription>
<para>Returns the norm of the vector. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the norm </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="30" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="structPosition_1abf82a72c9a5f64a4dfce9691bd3010ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Position::operator==</definition>
        <argsstring>(const Position &amp;p) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structPosition" kindref="compound">Position</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Compare two positions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structPosition" kindref="compound">Position</ref> to compare against</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if two positions are same </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="41" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structPosition_1aac2ef88bfed1a5370bb4c2921046e9c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Position::operator!=</definition>
        <argsstring>(const Position &amp;p) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structPosition" kindref="compound">Position</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Compare two positions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structPosition" kindref="compound">Position</ref> to compare against</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if two positions are not same </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="51" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="structPosition_1ac03f54aeec429d94d1fd6b2050b432b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structPosition" kindref="compound">Position</ref></type>
        <definition>Position Position::operator+</definition>
        <argsstring>(const Position &amp;p) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structPosition" kindref="compound">Position</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@ brief Add two positions <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structPosition" kindref="compound">Position</ref> to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sum of this position and p </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="57" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="structPosition_1a9e6f90b2c5ace8250c55dcc5602b3d01" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structPosition" kindref="compound">Position</ref></type>
        <definition>Position Position::operator-</definition>
        <argsstring>(const Position &amp;p) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structPosition" kindref="compound">Position</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@ brief Subtract two positions <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structPosition" kindref="compound">Position</ref> to subtract </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Difference of this position and p </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="65" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="structPosition_1a673c979cfd85c06ebe727e7195c52109" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structPosition" kindref="compound">Position</ref></type>
        <definition>Position Position::operator*</definition>
        <argsstring>(const double &amp;m) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const double &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Multiply times a scalar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Multiplier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Scaled position </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="74" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structPosition_1a58f4f48dc96ae023fa19cb0ae5ddd3f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structPosition" kindref="compound">Position</ref></type>
        <definition>Position Position::operator/</definition>
        <argsstring>(const double &amp;m) const </argsstring>
        <name>operator/</name>
        <param>
          <type>const double &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Divide by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Scaled position </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="82" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="82" bodyend="82"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Store 3D position. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="786">
        <label>Position</label>
        <link refid="structPosition"/>
      </node>
      <node id="787">
        <label>PositionYaw</label>
        <link refid="structPositionYaw"/>
        <childnode refid="786" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" line="8" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/types/position.h" bodystart="8" bodyend="83"/>
    <listofallmembers>
      <member refid="structPosition_1ac8dc0750468e3ca1a526d2dfcb0e030e" prot="public" virt="non-virtual"><scope>Position</scope><name>norm</name></member>
      <member refid="structPosition_1aac2ef88bfed1a5370bb4c2921046e9c0" prot="public" virt="non-virtual"><scope>Position</scope><name>operator!=</name></member>
      <member refid="structPosition_1a673c979cfd85c06ebe727e7195c52109" prot="public" virt="non-virtual"><scope>Position</scope><name>operator*</name></member>
      <member refid="structPosition_1ac03f54aeec429d94d1fd6b2050b432b3" prot="public" virt="non-virtual"><scope>Position</scope><name>operator+</name></member>
      <member refid="structPosition_1a9e6f90b2c5ace8250c55dcc5602b3d01" prot="public" virt="non-virtual"><scope>Position</scope><name>operator-</name></member>
      <member refid="structPosition_1a58f4f48dc96ae023fa19cb0ae5ddd3f7" prot="public" virt="non-virtual"><scope>Position</scope><name>operator/</name></member>
      <member refid="structPosition_1abf82a72c9a5f64a4dfce9691bd3010ed" prot="public" virt="non-virtual"><scope>Position</scope><name>operator==</name></member>
      <member refid="structPosition_1a369a577425f8ba02e8750d04b6a088db" prot="public" virt="non-virtual"><scope>Position</scope><name>Position</name></member>
      <member refid="structPosition_1a039074b4b66e3b570ea2f4e14583b0e0" prot="public" virt="non-virtual"><scope>Position</scope><name>Position</name></member>
      <member refid="structPosition_1a9abbe738bad177de91fe4774099c1260" prot="public" virt="non-virtual"><scope>Position</scope><name>x</name></member>
      <member refid="structPosition_1a75f48c2a1d2c7131b8be1a0687ae72c8" prot="public" virt="non-virtual"><scope>Position</scope><name>y</name></member>
      <member refid="structPosition_1ab26043bc2f8f6094818c17dd44e43228" prot="public" virt="non-virtual"><scope>Position</scope><name>z</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
