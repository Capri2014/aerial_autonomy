<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classAtomic" kind="class" prot="public">
    <compoundname>Atomic</compoundname>
    <includes refid="atomic_8h" local="no">atomic.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classAtomic_1a6014e74aff35db5dd3e2936936676ac6" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T Atomic&lt; T &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
<para>Data being stored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" line="66" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classAtomic_1a41caa960cb1dd350134fe3b6b71e93ed" prot="private" static="no" mutable="yes">
        <type>boost::mutex</type>
        <definition>boost::mutex Atomic&lt; T &gt;::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
<para>Synchronize access to data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" line="67" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classAtomic_1a3282eeb8d5ca9d377bb193858409f3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Atomic&lt; T &gt;::Atomic</definition>
        <argsstring>()=default</argsstring>
        <name>Atomic</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classAtomic_1ab7314bb870585248ffa1a5b4bcc0c8ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Atomic&lt; T &gt;::Atomic</definition>
        <argsstring>(const T &amp;data)</argsstring>
        <name>Atomic</name>
        <param>
          <type>const T &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Constructor that sets member data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set member data to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" line="20" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classAtomic_1a35458557c74e969266296964b80dde72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Atomic&lt; T &gt;::Atomic</definition>
        <argsstring>(const Atomic&lt; T &gt; &amp;a)</argsstring>
        <name>Atomic</name>
        <param>
          <type>const <ref refid="classAtomic" kindref="compound">Atomic</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" line="26" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classAtomic_1a2c3649f94f4cfdac68c54c28c5dcc959" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Atomic&lt; T &gt;::set</definition>
        <argsstring>(const T &amp;data)</argsstring>
        <name>set</name>
        <param>
          <type>const T &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set the data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set member data to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" line="32" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classAtomic_1a50d5b1eadc07bf419245a5e11d718486" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T Atomic&lt; T &gt;::get</definition>
        <argsstring>() const </argsstring>
        <name>get</name>
        <briefdescription>
<para>Get the data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" line="41" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" bodystart="41" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classAtomic_1a069d7397bbac8889a3f3012be6061c3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Atomic&lt; T &gt;::operator=</definition>
        <argsstring>(const Atomic&lt; T &gt; &amp;a)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classAtomic" kindref="compound">Atomic</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classAtomic" kindref="compound">Atomic</ref> class whose data we are copying </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" line="51" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classAtomic_1a08cc1d2dd08435156b906ff13b2f0f00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Atomic&lt; T &gt;::operator=</definition>
        <argsstring>(const T &amp;d)</argsstring>
        <name>operator=</name>
        <param>
          <type>const T &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Assignment operator for data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Data we are copying </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" line="57" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classAtomic_1a6ffb6a65b9abcfb3d41836336edf2664" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Atomic&lt; T &gt;::operator T</definition>
        <argsstring>() const </argsstring>
        <name>operator T</name>
        <briefdescription>
<para>Conversion operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" line="63" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" bodystart="63" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Template class to create thread-safe variables with internal lock management. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" line="9" column="1" bodyfile="/home/matt/catkin_ws/src/aerial_autonomy/include/aerial_autonomy/common/atomic.h" bodystart="9" bodyend="68"/>
    <listofallmembers>
      <member refid="classAtomic_1a3282eeb8d5ca9d377bb193858409f3d3" prot="public" virt="non-virtual"><scope>Atomic</scope><name>Atomic</name></member>
      <member refid="classAtomic_1ab7314bb870585248ffa1a5b4bcc0c8ee" prot="public" virt="non-virtual"><scope>Atomic</scope><name>Atomic</name></member>
      <member refid="classAtomic_1a35458557c74e969266296964b80dde72" prot="public" virt="non-virtual"><scope>Atomic</scope><name>Atomic</name></member>
      <member refid="classAtomic_1a6014e74aff35db5dd3e2936936676ac6" prot="private" virt="non-virtual"><scope>Atomic</scope><name>data_</name></member>
      <member refid="classAtomic_1a50d5b1eadc07bf419245a5e11d718486" prot="public" virt="non-virtual"><scope>Atomic</scope><name>get</name></member>
      <member refid="classAtomic_1a41caa960cb1dd350134fe3b6b71e93ed" prot="private" virt="non-virtual"><scope>Atomic</scope><name>mutex_</name></member>
      <member refid="classAtomic_1a6ffb6a65b9abcfb3d41836336edf2664" prot="public" virt="non-virtual"><scope>Atomic</scope><name>operator T</name></member>
      <member refid="classAtomic_1a069d7397bbac8889a3f3012be6061c3c" prot="public" virt="non-virtual"><scope>Atomic</scope><name>operator=</name></member>
      <member refid="classAtomic_1a08cc1d2dd08435156b906ff13b2f0f00" prot="public" virt="non-virtual"><scope>Atomic</scope><name>operator=</name></member>
      <member refid="classAtomic_1a2c3649f94f4cfdac68c54c28c5dcc959" prot="public" virt="non-virtual"><scope>Atomic</scope><name>set</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
